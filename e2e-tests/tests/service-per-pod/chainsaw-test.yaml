# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: service-per-pod
spec:
  steps:
  - name: step-00
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions
          init_temp_dir # do this only in the first TestStep

          deploy_operator
          deploy_non_tls_cluster_secrets
          deploy_tls_cluster_secrets
          deploy_client
    - assert:
        file: 00-assert.yaml
  - name: step-01
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nget_cr
          \\\n  | yq eval '.spec.mysql.clusterType=\"async\"' - \\\n\t| yq eval '.spec.mysql.expose.enabled
          = true' - \\\n\t| yq eval '.spec.mysql.expose.type = \"ClusterIP\"' - \\\n\t|
          kubectl -n \"${NAMESPACE}\" apply -f -"
        
    - assert:
        file: 01-assert.yaml
  - name: step-02
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nrun_mysql
          \\\n\t\"CREATE DATABASE IF NOT EXISTS myDB; CREATE TABLE IF NOT EXISTS myDB.myTable
          (id int PRIMARY KEY)\" \\\n\t\"-h $(get_haproxy_svc $(get_cluster_name))
          -uroot -proot_password\"\n\nrun_mysql \\\n\t\"INSERT myDB.myTable (id) VALUES
          (100500)\" \\\n\t\"-h $(get_haproxy_svc $(get_cluster_name)) -uroot -proot_password\""
  - name: step-03
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nargs=''\nsize=$(kubectl
          -n ${NAMESPACE} get ps ${test_name} -o jsonpath='{.spec.mysql.size}')\nfor
          i in $(seq 0 $((size - 1))); do\n\tip=$(get_service_ip ${test_name}-mysql-${i})\n\thost=$(get_mysql_headless_fqdn
          ${test_name} $i)\n\tdata=$(run_mysql \"SELECT * FROM myDB.myTable\" \"-h
          ${ip} -uroot -proot_password\")\n\targs=\"${args} --from-literal=${host}=${data}\"\ndone\n\nkubectl
          create configmap -n \"${NAMESPACE}\" 04-read-from-clusterip ${args}"
        
    - assert:
        file: 03-assert.yaml
  - name: step-04
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nget_cr
          \\\n  | yq eval '.spec.mysql.clusterType=\"async\"' - \\\n\t| yq eval '.spec.mysql.expose.enabled
          = true' - \\\n\t| yq eval '.spec.mysql.expose.type = \"LoadBalancer\"' -
          \\\n\t| kubectl -n \"${NAMESPACE}\" apply -f -"
        
    - assert:
        file: 04-assert.yaml
  - name: step-05
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nargs=''\nsize=$(kubectl
          -n ${NAMESPACE} get ps ${test_name} -o jsonpath='{.spec.mysql.size}')\nsleep
          75\nfor i in $(seq 0 $((size - 1))); do\n\tip=$(get_service_ip ${test_name}-mysql-$i)\n\thost=$(get_mysql_headless_fqdn
          ${test_name} $i)\n\tdata=$(run_mysql \"SELECT * FROM myDB.myTable\" \"-h
          ${ip} -uroot -proot_password\")\n\targs=\"${args} --from-literal=${host}=${data}\"\ndone\n\nkubectl
          create configmap -n \"${NAMESPACE}\" 04-read-from-loadbalancer ${args}"
        
    - assert:
        file: 05-assert.yaml
  - name: step-99
    try:
    - apply:
        file: 99-drop-finalizer.yaml
