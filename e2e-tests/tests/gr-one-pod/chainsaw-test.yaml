# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: gr-one-pod
spec:
  steps:
  - name: step-00
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions
          init_temp_dir # do this only in the first TestStep

          apply_s3_storage_secrets
          deploy_operator
          deploy_non_tls_cluster_secrets
          deploy_tls_cluster_secrets
          deploy_client
          deploy_minio
    - assert:
        file: 00-assert.yaml
  - name: step-01
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nget_cr
          \\\n  | yq eval '.spec.mysql.clusterType=\"group-replication\"' - \\\n\t|
          yq eval '.spec.proxy.router.enabled=true' - \\\n\t| yq eval '.spec.proxy.haproxy.enabled=false'
          - \\\n  | yq eval '.spec.allowUnsafeConfigurations=true' - \\\n  | yq eval
          '.spec.mysql.size=1' - \\\n  | yq eval '.spec.proxy.haproxy.enabled=false'
          - \\\n  | yq eval '.spec.proxy.router.size=1' - \\\n  | yq eval '.spec.orchestrator.enabled=false'
          - \\\n  | yq eval '.spec.backup.storages.minio.type=\"s3\"' - \\\n  | yq
          eval '.spec.backup.storages.minio.s3.bucket=\"operator-testing\"' - \\\n
          \ | yq eval '.spec.backup.storages.minio.s3.credentialsSecret=\"minio-secret\"'
          - \\\n  | yq eval '.spec.backup.storages.minio.s3.endpointUrl=\"http://minio-service:9000\"'
          - \\\n  | yq eval '.spec.backup.storages.minio.s3.region=\"us-east-1\"'
          - \\\n  | kubectl -n \"${NAMESPACE}\" apply -f -"
    - assert:
        file: 01-assert.yaml
    - error:
        file: 01-errors.yml
  - name: step-02
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nrun_mysql
          \\\n\t\"CREATE DATABASE IF NOT EXISTS myDB; CREATE TABLE IF NOT EXISTS myDB.myTable
          (id int PRIMARY KEY)\" \\\n\t\"-h $(get_router_service $(get_cluster_name))
          -uroot -proot_password\"\n\nrun_mysql \\\n\t\"INSERT myDB.myTable (id) VALUES
          (100500)\" \\\n\t\"-h $(get_router_service $(get_cluster_name)) -uroot -proot_password\""
  - name: step-03
    try:
    - apply:
        file: 03-create-backup-minio.yaml
    - assert:
        file: 03-assert.yaml
  - name: step-04
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nrun_mysql
          \\\n\t\"TRUNCATE TABLE myDB.myTable\" \\\n\t\"-h $(get_router_service $(get_cluster_name))
          -uroot -proot_password\"\n\ndata=$(run_mysql \"SELECT * FROM myDB.myTable\"
          \"-h $(get_router_service $(get_cluster_name)) -uroot -proot_password\")\nkubectl
          create configmap -n \"${NAMESPACE}\" 04-delete-data-minio --from-literal=data=\"${data}\""
    - assert:
        file: 04-assert.yaml
  - name: step-05
    try:
    - apply:
        file: 05-restore-from-minio.yaml
    - assert:
        file: 05-assert.yaml
  - name: step-06
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions

          wait_cluster_consistency_gr "${test_name}" "1" "1"

          data=$(run_mysql "SELECT * FROM myDB.myTable" "-h $(get_router_service $(get_cluster_name)) -uroot -proot_password")
          kubectl create configmap -n "${NAMESPACE}" 06-read-data-minio --from-literal=data="${data}"
    - assert:
        file: 06-assert.yaml
  - name: step-99
    try:
    - apply:
        file: 99-drop-finalizer.yaml
