# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: gr-init-deploy
spec:
  steps:
  - name: step-00
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions
          init_temp_dir # do this only in the first TestStep

          deploy_operator
          deploy_non_tls_cluster_secrets
          deploy_tls_cluster_secrets
          deploy_client
    - assert:
        file: 00-assert.yaml
  - name: step-01
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nget_cr
          \\\n\t| yq eval '.spec.mysql.clusterType=\"group-replication\"' - \\\n\t|
          yq eval '.spec.proxy.router.enabled=true' - \\\n\t| yq eval '.spec.proxy.haproxy.enabled=false'
          - \\\n\t| kubectl -n \"${NAMESPACE}\" apply -f -"
    - assert:
        file: 01-assert.yaml
  - name: step-02
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions

          cluster_status=$(get_gr_status "$(get_mysqlsh_uri)")
          status=$(echo ${cluster_status} | jq -r .defaultReplicaSet.status)
          echo ${cluster_status} | jq -r .defaultReplicaSet.topology[].address | sed "s/.${NAMESPACE}//g" > ${TEMP_DIR}/members
          online_members=$(echo ${cluster_status} | jq -r .defaultReplicaSet.topology[].status | grep ONLINE | wc -l | sed 's/^ *//')
          primary=$(echo ${cluster_status} | jq -r .defaultReplicaSet.topology[].memberRole | grep PRIMARY | wc -l | sed 's/^ *//')
          secondary=$(echo ${cluster_status} | jq -r .defaultReplicaSet.topology[].memberRole | grep SECONDARY | wc -l | sed 's/^ *//')

          kubectl create configmap -n "${NAMESPACE}" 02-check-topology \
            --from-file=members=${TEMP_DIR}/members \
            --from-literal=status=${status} \
            --from-literal=online_members=${online_members} \
            --from-literal=primary_count=${primary} \
            --from-literal=secondary_count=${secondary}
    - assert:
        file: 02-assert.yaml
  - name: step-03
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\nrun_mysql
          \\\n\t\"CREATE DATABASE IF NOT EXISTS myDB; CREATE TABLE IF NOT EXISTS myDB.myTable
          (id int PRIMARY KEY)\" \\\n\t\"-h $(get_mysql_router_service $(get_cluster_name))
          -P 6446 -uroot -proot_password\"\n\nrun_mysql \\\n\t\"INSERT myDB.myTable
          (id) VALUES (100500)\" \\\n\t\"-h $(get_mysql_router_service $(get_cluster_name))
          -P 6446 -uroot -proot_password\""
  - name: step-04
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions

          data=$(run_mysql "SELECT * FROM myDB.myTable" "-h $(get_mysql_router_service $(get_cluster_name)) -P 6446 -uroot -proot_password")

          kubectl create configmap -n "${NAMESPACE}" 03-read-from-primary --from-literal=data="${data}"
    - assert:
        file: 04-assert.yaml
  - name: step-05
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions

          data=$(run_mysql "SELECT * FROM myDB.myTable" "-h $(get_mysql_router_service $(get_cluster_name)) -P 6447 -uroot -proot_password")

          kubectl create configmap -n "${NAMESPACE}" 04-read-from-replicas --from-literal=data="${data}"
    - assert:
        file: 05-assert.yaml
  - name: step-06
    try:
    - script:
        content: |-
          set -o errexit
          set -o xtrace

          source ../../functions

          check_passwords_leak
  - name: step-07
    try:
    - script:
        content: "set -o errexit\nset -o xtrace\n\nsource ../../functions\n\npods=($(get_mysql_pods))\n\nargs=\"\"\nfor
          pod in \"${pods[@]}\"; do\n\tseeds=$(run_mysql \"SELECT @@group_replication_group_seeds\"
          \"-h ${pod}.$(get_mysql_service gr-init-deploy).${NAMESPACE} -uroot -proot_password\")\n\targs=\"${args}
          --from-literal=${pod}=$(echo ${seeds} | sed \"s/${NAMESPACE}/NAMESPACE/g\")\"\ndone\n\nkubectl
          create configmap -n \"${NAMESPACE}\" 07-check-group-seeds $args"
    - assert:
        file: 07-assert.yaml
  - name: step-99
    try:
    - apply:
        file: 99-drop-finalizer.yaml
